/*
 * @Author       : zhaixiaowei@xdf.cn
 * @Date         : 2022-08-08 18:32:32
 * @LastEditors  : zhaixiaowei@xdf.cn
 * @LastEditTime : 2022-08-08 20:33:23
 * @Description  : 逻辑与 跟 逻辑或  是如何执行的
 */

// todo 逻辑或 
if (a || b) {
    // 只要有一个为true 就返回true
}

a = 'zxw'
a == 'zxw' || (a = 'xx')
// 输出 true  a的值是 ‘zxw’
// 当左边的表达式为true时， 将返回左边表达式的值，并且不会执行右边的表达式

a = 'zxw'
a == 'lbj' || (a = 'xx')
// 输出 false a的值是 'xx'
// 当左边的表达式为false时，才会去执行右边的表达式，并且返回右边表达式的值



// 逻辑与

if (a && b) {
    // 只有前后都是true的时候才返回true 其余情况都返回false
}

a = 1
a !== 1 && 5
// 输出false
// 当左边的表达式为false时，例如null 0 undefined ，那么将返回左边的表达式的值，并且不会执行右边的表达式

a = 1
a === 1 && (a = 3)
// 执行了a=3的代码 并且返回值
// 左边的表达式可以转换为true时，才会执行右边的表达式，并且返回右边表达式的值(3) 为什么会返回值：具体看下面的例子

// 返回了右边的表达式 这个很重要 举个例子：
var a = "zx";
var y = (a == "zx" && (a = "xx"));
//输出 y的值为：xx
//解析：&& 左边 为true，所以就执行了 右边的表达式，并且返回右边表达式的值"xx"，所以y的值就为xx;

// 逻辑运算符优先级 

! >> && >> ||

    // 大杂烩 来个练习题
    a = 5;
b = (a > 6 && 0 || 1);
// 输出：  b的值：1
// 分析：&& 优先级 高于 || 所以我们先看 &&
// a > 6 && 0  => a > 6 为：false,所以不会执行后面的表达式，直接返回false;
// false || 1  => 前面为false的话，直接返回后面表达式的值 ，所以返回 1；


// 总结： 
// 1. 如果利用短路原则写代码的话  左侧尽量都是 条件判断语句 ，然后右侧才是具体需要去执行的代码语句。
// 2. 利用短路原则，不管是哪种情况，都会返回 左边或者右边表达式的值，这块需要额外注意。